#!/usr/bin/env python3
import rospy 
from cv_bridge import CvBridge
import imutils  
import cv2 
import sys
from sensor_msgs.msg import Image 
from std_msgs.msg import Float64MultiArray
from pack.srv import text,textResponse, servicefile
import numpy as np
import functools

class Arucom:
    def __init__(self):
        rospy.init_node("my_node")
        self.bridge=CvBridge()
        rospy.Service("service",text,self.serverfunc)
        rospy.service("distance",servicefile,self.distance)
        rospy.spin()
    
    def serverfunc(self, msg):
        arucoDict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_100)
        arucoParams = cv2.aruco.DetectorParameters()
        detector=cv2.aruco.ArucoDetector(arucoDict,arucoParams)
        img1=self.bridge.imgmsg_to_cv2(msg.imgs,"bgr8")
        img1=imutils.resize(img1, width=1000)
        (corners, ids, rejected) = detector.detectMarkers(img1)
        self.corners = corners
        self.ids=ids
        if len(corners)!=0:    
            z=Float64MultiArray()
            y=Float64MultiArray()
            z.layout=list(ids)
            y.data=list(corners)
            print("z=",z)
            print(f"y={y}")
         
    def distance(self, data):
        corners = self.corners
        ids = self.ids
        x_n = (data.a.position.x)*(0.5)
        y_n = (data.a.position.y)*(0.5)
        corners[ids.index(data.id)]

        for id in ids:
            if id == data.id:
                self.corners = corners
                # x_sum = corners[0][0]+ corners[1][0]+ corners[2][0]+ corners[3][0]
                x_coords = corners[0,:]
                y_coords = corners[1,:]
                x_sum = functools.reduce(lambda x,y: x+y, x_coords)
                # y_sum = corners[0][1]+ corners[0][2]+ corners[0][3]+ corners[0][4] 
                y_sum = functools.reduce(lambda x,y: x+y, y_coords)
                x_c = x_sum*.25
                y_c = y_sum*.25
        
        data.r=((x_c-x_n)^2+(y_c-y_n)^2)^(0.5)

        data.theta=(np.arctan((y_n-y_c)/(x_n-x_c)))-2*(np.arccos(data.a.orientation.w))
        print(data.r) 
        print(data.theta)
        return data
        
if  __name__=='__main__':
   d=Arucom()     